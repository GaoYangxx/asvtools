[{"path":"https://gaoyangxx.github.io/asvtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 asvtools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/articles/filtering-asvs.html","id":"filtering-asv-data-with-asvtools","dir":"Articles","previous_headings":"","what":"Filtering ASV Data with asvtools","title":"Filtering ASV Data with asvtools","text":"vignette guides effectively filter Amplicon Sequence Variant (ASV) data using asvtools package. Filtering crucial step microbiome data analysis, helping remove noise, reduce computational burden, significantly improve quality downstream analyses. filter_asvs() function offers flexible criteria, allowing precisely control ASVs retained based project’s specific needs.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/articles/filtering-asvs.html","id":"understanding-filter_asvs-filtering-criteria","dir":"Articles","previous_headings":"","what":"Understanding filter_asvs() Filtering Criteria","title":"Filtering ASV Data with asvtools","text":"filter_asvs() function retains ASVs based combination four configurable conditions: 1.Minimum Sample Prevalence (min_samples_present): ASV must present (absolute abundance > 0) least specified number samples. 2.Minimum Absolute Abundance Value (min_abs_abundance_value): samples ASV present, absolute abundance must greater equal threshold ASV considered “present” specific condition. 3.Minimum Group Prevalence (min_groups_present) (Optional): metadata grouping column provided, ASV must present (absolute abundance > 0) least specified number unique groups defined group_column_name. 4.Minimum Overall Average Relative Abundance (min_overall_avg_rel_abundance): ASV’s overall average relative abundance across samples must greater equal threshold. ASV must satisfy specified conditions retained.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/articles/filtering-asvs.html","id":"preparing-example-data","dir":"Articles","previous_headings":"","what":"Preparing Example Data","title":"Filtering ASV Data with asvtools","text":"illustrate filtering process, ’ll create small, simulated ASV count table sample metadata. real-world analysis, load experimental data.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/articles/filtering-asvs.html","id":"create-a-dummy-asv-count-table","dir":"Articles","previous_headings":"","what":"Create a dummy ASV count table","title":"Filtering ASV Data with asvtools","text":"","code":"asv_table_example <- data.frame(   JRG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 18, 0, 0, 0, 33, 33, 0, 37, 0, 0, 0, 0, 0, 38, 0),   JRG_2 = c(0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 0, 0, 29, 0, 0, 0, 32, 0, 0, 44, 0, 0, 0, 0, 0, 22, 0),   JRG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 12, 0, 5, 0, 46, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 28, 0),   JRG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 27, 0, 83, 0, 27, 25, 0, 0, 0, 34, 37, 0, 29, 0, 0, 0, 0, 0, 19, 0),   JRG_5 = c(0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 43, 0, 20, 0, 0, 0, 0, 0, 18, 0),   JRG_6 = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 22, 0),   JJG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 38, 49, 0, 0, 25, 28, 0, 0, 48, 0, 9, 18, 105, 0, 0, 0, 0, 44, 62, 9),   JJG_2 = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 64, 0, 0, 26, 31, 0, 0, 31, 23, 8, 0, 155, 0, 0, 15, 0, 52, 79, 16),   JJG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 0, 41, 30, 0, 0, 0, 26, 0, 11, 0, 213, 0, 0, 0, 0, 59, 51, 24),   JJG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 31, 56, 0, 15, 24, 37, 15, 0, 33, 10, 13, 0, 65, 41, 0, 14, 0, 37, 81, 19),   JJG_5 = c(0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 32, 0, 0, 66, 55, 0, 0, 36, 0, 12, 0, 111, 0, 0, 0, 0, 62, 44, 30),   JJG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 33, 21, 0, 0, 25, 0, 7, 34, 102, 0, 0, 0, 5, 57, 37, 30),   TZG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 36, 15, 0, 50, 0, 20, 0, 23, 16, 20, 4, 0, 0, 35, 25, 30, 224, 0, 0, 14),   TZG_2 = c(0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 14, 0, 0, 0, 0, 18, 18, 0, 0, 0, 49, 0, 61, 52, 24, 88, 34, 0, 10),   TZG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 12, 121, 0, 0, 25, 26, 15, 26, 0, 0, 0, 76, 87, 37, 0, 61, 0, 0, 0),   TZG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 14, 0, 31, 0, 25, 14, 18, 0, 0, 0, 0, 0, 43, 25, 0, 66, 0, 0, 24),   TZG_5 = c(2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 103, 0, 0, 0, 0, 10, 0, 0, 3, 0, 0, 63, 32, 24, 142, 32, 0, 0),   TZG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 12, 0, 32, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 29, 0, 60, 0, 0, 14),   PAG_1 = c(0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 34, 0, 0, 0, 16, 122, 0, 0, 0, 0, 0, 23, 25, 0, 0, 34, 0),   PAG_2 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 0, 10, 0, 122, 0, 0, 0, 0, 0, 27, 21, 0, 0, 0, 0),   PAG_3 = c(0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 5, 4, 79, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0),   PAG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 8, 7, 428, 0, 0, 0, 0, 0, 0, 38, 0, 0, 15, 0),   PAG_5 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 11, 18, 598, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0),   PAG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 36, 0, 0, 9, 0, 161, 0, 0, 0, 0, 0, 29, 23, 0, 0, 42, 0),   row.names = c(\"ASV33223\", \"ASV25409\", \"ASV28883\", \"ASV70267\", \"ASV48196\", \"ASV40031\", \"ASV65646\", \"ASV8421\", \"ASV58120\", \"ASV52240\", \"ASV16749\", \"ASV14431\", \"ASV75284\", \"ASV29542\", \"ASV59240\", \"ASV71098\", \"ASV11980\", \"ASV34954\", \"ASV43989\", \"ASV16613\", \"ASV201\", \"ASV138\", \"ASV11736\", \"ASV207\", \"ASV323\", \"ASV4139\", \"ASV4011\", \"ASV6667\", \"ASV317\", \"ASV11791\", \"ASV712\", \"ASV6543\", \"ASV14\", \"ASV6519\", \"ASV3823\", \"ASV3800\", \"ASV5338\", \"ASV105\", \"ASV117\", \"ASV337\") )"},{"path":"https://gaoyangxx.github.io/asvtools/articles/filtering-asvs.html","id":"create-dummy-sample-metadata","dir":"Articles","previous_headings":"","what":"Create dummy sample metadata","title":"Filtering ASV Data with asvtools","text":"#Applying Filtering: Examples Now, let’s demonstrate use filter_asvs() function different filtering strategies. Example 1: Basic Filtering (Prevalence Absolute Abundance) ’ll start removing ASVs present fewer 3 samples, whose absolute abundance present samples less 5. Example 2: Filtering Group Prevalence , introduce metadata_df group_column_name add condition ASVs must present least 2 distinct Groups. Example 3: Filtering Overall Average Relative Abundance example, add condition ASV’s overall average relative abundance must 0.005 (0.5%). Example 4: Applying Filtering Criteria Finally, combine filtering criteria demonstrate full power filter_asvs(). Conclusion vignette demonstrated usage filter_asvs() function asvtools package versatile filtering capabilities. flexibly applying criteria prevalence, absolute abundance, group prevalence, overall average relative abundance, can precisely control quality control preprocessing ASV data, laying solid foundation subsequent microbiome data analysis. Please adjust parameters filter_asvs() according specific research needs achieve optimal filtering results.","code":"metadata_df_example <- data.frame(   Sample.ID = c(\"JRG_1\", \"JRG_2\", \"JRG_3\", \"JRG_4\", \"JRG_5\", \"JRG_6\", \"JJG_1\", \"JJG_2\", \"JJG_3\", \"JJG_4\", \"JJG_5\", \"JJG_6\", \"TZG_1\", \"TZG_2\", \"TZG_3\", \"TZG_4\", \"TZG_5\", \"TZG_6\", \"PAG_1\", \"PAG_2\", \"PAG_3\", \"PAG_4\", \"PAG_5\", \"PAG_6\"),   Group = c(\"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\"),   Origin = c(\"JR\", \"JR\", \"JR\", \"JR\", \"JR\", \"JR\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\"),   Niche = c(\"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\"),   row.names = c(\"JRG_1\", \"JRG_2\", \"JRG_3\", \"JRG_4\", \"JRG_5\", \"JRG_6\", \"JJG_1\", \"JJG_2\", \"JJG_3\", \"JJG_4\", \"JJG_5\", \"JJG_6\", \"TZG_1\", \"TZG_2\", \"TZG_3\", \"TZG_4\", \"TZG_5\", \"TZG_6\", \"PAG_1\", \"PAG_2\", \"PAG_3\", \"PAG_4\", \"PAG_5\", \"PAG_6\"),   stringsAsFactors = FALSE ) cat(\"--- Original ASV Count:\", nrow(asv_table_example), \"---\\n\") ## --- Original ASV Count: 40 --- filtered_asvs_basic <- filter_asvs(   asv_counts_df = asv_table_example,   min_samples_present = 3,   min_abs_abundance_value = 5 ) ## No `metadata_df` or `group_column_name` provided; skipping group-based filtering. ## After filtering by multiple criteria, 20 ASVs were retained. cat(\"\\n--- Filtered ASV Count:\", nrow(filtered_asvs_basic), \"---\\n\") ##  ## --- Filtered ASV Count: 20 --- print(filtered_asvs_basic) ##          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 ## ASV201      16    23    36    27     0    21    38    25    41    31    24 ## ASV138       0     0    12     0     0     0    49    64    45    56    32 ## ASV11736     0     0     0    83     0     0     0     0     0     0     0 ## ASV207       0     0     5     0     0     0     0     0    41    15     0 ## ASV323       0     0     0    27     0     0    25    26    30    24    66 ## ASV4139     18    29    46    25    50     0    28    31     0    37    55 ## ASV4011      0     0     0     0     0     0     0     0     0    15     0 ## ASV6667      0     0     0     0     0     0     0     0     0     0     0 ## ASV317       0     0     0     0     0     0    48    31    26    33    36 ## ASV11791    33    32     0    34     0     0     0    23     0    10     0 ## ASV712      33     0     0    37    43    21     9     8    11    13    12 ## ASV6543      0     0     0     0     0     0    18     0     0     0     0 ## ASV14       37    44    25    29    20     0   105   155   213    65   111 ## ASV6519      0     0     0     0     0     0     0     0     0    41     0 ## ASV3823      0     0     0     0     0     0     0     0     0     0     0 ## ASV3800      0     0     0     0     0     0     0    15     0    14     0 ## ASV5338      0     0     0     0     0     0     0     0     0     0     0 ## ASV105       0     0     0     0     0     0    44    52    59    37    62 ## ASV117      38    22    28    19    18    22    62    79    51    81    44 ## ASV337       0     0     0     0     0     0     9    16    24    19    30 ##          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 ## ASV201       0    36    35    39    50    53    43     0     0     0     0 ## ASV138      31    15    14    12    14     0    12     8     9     8    16 ## ASV11736     0     0     0   121     0   103     0     0     0     0     0 ## ASV207       0    50     0     0    31     0    32    34     0     0     0 ## ASV323      33     0     0     0     0     0     0     0     0     0     0 ## ASV4139     21    20     0    25    25     0     0     0     0     0     0 ## ASV4011      0     0    18    26    14     0     0     0    10     5     8 ## ASV6667      0    23    18    15    18    10    11    16     0     4     7 ## ASV317      25    16     0    26     0     0     0   122   122    79   428 ## ASV11791     0    20     0     0     0     0     0     0     0     0     0 ## ASV712       7     4     0     0     0     3     0     0     0     0     0 ## ASV6543     34     0    49     0     0     0     0     0     0     0     0 ## ASV14      102     0     0    76     0     0     0     0     0     0     0 ## ASV6519      0    35    61    87    43    63     0     0     0     0     0 ## ASV3823      0    25    52    37    25    32    29    23    27     0     0 ## ASV3800      0    30    24     0     0    24     0    25    21    41    38 ## ASV5338      5   224    88    61    66   142    60     0     0     0     0 ## ASV105      57     0    34     0     0    32     0     0     0     0     0 ## ASV117      37     0     0     0     0     0     0    34     0     0    15 ## ASV337      30    14    10     0    24     0    14     0     0     0     0 ##          PAG_5 PAG_6 ## ASV201       0     0 ## ASV138      11     9 ## ASV11736     0     0 ## ASV207       0    36 ## ASV323       0     0 ## ASV4139      0     0 ## ASV4011     11     9 ## ASV6667     18     0 ## ASV317     598   161 ## ASV11791     0     0 ## ASV712       0     0 ## ASV6543      0     0 ## ASV14        0     0 ## ASV6519      0     0 ## ASV3823      0    29 ## ASV3800     34    23 ## ASV5338      0     0 ## ASV105       0     0 ## ASV117       0    42 ## ASV337       0     0 cat(\"--- Original ASV Count:\", nrow(asv_table_example), \"---\\n\") ## --- Original ASV Count: 40 --- filtered_asvs_group <- filter_asvs(   asv_counts_df = asv_table_example,   metadata_df = metadata_df_example,   group_column_name = \"Group\", # Use the 'Group' column from metadata for grouping   min_samples_present = 2,   min_abs_abundance_value = 3,   min_groups_present = 2 # ASV must be present in at least 2 distinct 'Group's ) ## After filtering by multiple criteria, 20 ASVs were retained. cat(\"\\n--- Filtered ASV Count:\", nrow(filtered_asvs_group), \"---\\n\") ##  ## --- Filtered ASV Count: 20 --- print(filtered_asvs_group) ##          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 ## ASV201      16    23    36    27     0    21    38    25    41    31    24 ## ASV138       0     0    12     0     0     0    49    64    45    56    32 ## ASV11736     0     0     0    83     0     0     0     0     0     0     0 ## ASV207       0     0     5     0     0     0     0     0    41    15     0 ## ASV323       0     0     0    27     0     0    25    26    30    24    66 ## ASV4139     18    29    46    25    50     0    28    31     0    37    55 ## ASV4011      0     0     0     0     0     0     0     0     0    15     0 ## ASV6667      0     0     0     0     0     0     0     0     0     0     0 ## ASV317       0     0     0     0     0     0    48    31    26    33    36 ## ASV11791    33    32     0    34     0     0     0    23     0    10     0 ## ASV712      33     0     0    37    43    21     9     8    11    13    12 ## ASV6543      0     0     0     0     0     0    18     0     0     0     0 ## ASV14       37    44    25    29    20     0   105   155   213    65   111 ## ASV6519      0     0     0     0     0     0     0     0     0    41     0 ## ASV3823      0     0     0     0     0     0     0     0     0     0     0 ## ASV3800      0     0     0     0     0     0     0    15     0    14     0 ## ASV5338      0     0     0     0     0     0     0     0     0     0     0 ## ASV105       0     0     0     0     0     0    44    52    59    37    62 ## ASV117      38    22    28    19    18    22    62    79    51    81    44 ## ASV337       0     0     0     0     0     0     9    16    24    19    30 ##          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 ## ASV201       0    36    35    39    50    53    43     0     0     0     0 ## ASV138      31    15    14    12    14     0    12     8     9     8    16 ## ASV11736     0     0     0   121     0   103     0     0     0     0     0 ## ASV207       0    50     0     0    31     0    32    34     0     0     0 ## ASV323      33     0     0     0     0     0     0     0     0     0     0 ## ASV4139     21    20     0    25    25     0     0     0     0     0     0 ## ASV4011      0     0    18    26    14     0     0     0    10     5     8 ## ASV6667      0    23    18    15    18    10    11    16     0     4     7 ## ASV317      25    16     0    26     0     0     0   122   122    79   428 ## ASV11791     0    20     0     0     0     0     0     0     0     0     0 ## ASV712       7     4     0     0     0     3     0     0     0     0     0 ## ASV6543     34     0    49     0     0     0     0     0     0     0     0 ## ASV14      102     0     0    76     0     0     0     0     0     0     0 ## ASV6519      0    35    61    87    43    63     0     0     0     0     0 ## ASV3823      0    25    52    37    25    32    29    23    27     0     0 ## ASV3800      0    30    24     0     0    24     0    25    21    41    38 ## ASV5338      5   224    88    61    66   142    60     0     0     0     0 ## ASV105      57     0    34     0     0    32     0     0     0     0     0 ## ASV117      37     0     0     0     0     0     0    34     0     0    15 ## ASV337      30    14    10     0    24     0    14     0     0     0     0 ##          PAG_5 PAG_6 ## ASV201       0     0 ## ASV138      11     9 ## ASV11736     0     0 ## ASV207       0    36 ## ASV323       0     0 ## ASV4139      0     0 ## ASV4011     11     9 ## ASV6667     18     0 ## ASV317     598   161 ## ASV11791     0     0 ## ASV712       0     0 ## ASV6543      0     0 ## ASV14        0     0 ## ASV6519      0     0 ## ASV3823      0    29 ## ASV3800     34    23 ## ASV5338      0     0 ## ASV105       0     0 ## ASV117       0    42 ## ASV337       0     0 cat(\"--- Original ASV Count:\", nrow(asv_table_example), \"---\\n\") ## --- Original ASV Count: 40 --- filtered_asvs_rel_abund <- filter_asvs(   asv_counts_df = asv_table_example,   min_samples_present = 2,   min_abs_abundance_value = 1,   min_overall_avg_rel_abundance = 0.005 # ASV overall average relative abundance >= 0.5% ) ## No `metadata_df` or `group_column_name` provided; skipping group-based filtering. ## After filtering by multiple criteria, 20 ASVs were retained. cat(\"\\n--- Filtered ASV Count:\", nrow(filtered_asvs_rel_abund), \"---\\n\") ##  ## --- Filtered ASV Count: 20 --- print(filtered_asvs_rel_abund) ##          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 ## ASV201      16    23    36    27     0    21    38    25    41    31    24 ## ASV138       0     0    12     0     0     0    49    64    45    56    32 ## ASV11736     0     0     0    83     0     0     0     0     0     0     0 ## ASV207       0     0     5     0     0     0     0     0    41    15     0 ## ASV323       0     0     0    27     0     0    25    26    30    24    66 ## ASV4139     18    29    46    25    50     0    28    31     0    37    55 ## ASV4011      0     0     0     0     0     0     0     0     0    15     0 ## ASV6667      0     0     0     0     0     0     0     0     0     0     0 ## ASV317       0     0     0     0     0     0    48    31    26    33    36 ## ASV11791    33    32     0    34     0     0     0    23     0    10     0 ## ASV712      33     0     0    37    43    21     9     8    11    13    12 ## ASV6543      0     0     0     0     0     0    18     0     0     0     0 ## ASV14       37    44    25    29    20     0   105   155   213    65   111 ## ASV6519      0     0     0     0     0     0     0     0     0    41     0 ## ASV3823      0     0     0     0     0     0     0     0     0     0     0 ## ASV3800      0     0     0     0     0     0     0    15     0    14     0 ## ASV5338      0     0     0     0     0     0     0     0     0     0     0 ## ASV105       0     0     0     0     0     0    44    52    59    37    62 ## ASV117      38    22    28    19    18    22    62    79    51    81    44 ## ASV337       0     0     0     0     0     0     9    16    24    19    30 ##          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 ## ASV201       0    36    35    39    50    53    43     0     0     0     0 ## ASV138      31    15    14    12    14     0    12     8     9     8    16 ## ASV11736     0     0     0   121     0   103     0     0     0     0     0 ## ASV207       0    50     0     0    31     0    32    34     0     0     0 ## ASV323      33     0     0     0     0     0     0     0     0     0     0 ## ASV4139     21    20     0    25    25     0     0     0     0     0     0 ## ASV4011      0     0    18    26    14     0     0     0    10     5     8 ## ASV6667      0    23    18    15    18    10    11    16     0     4     7 ## ASV317      25    16     0    26     0     0     0   122   122    79   428 ## ASV11791     0    20     0     0     0     0     0     0     0     0     0 ## ASV712       7     4     0     0     0     3     0     0     0     0     0 ## ASV6543     34     0    49     0     0     0     0     0     0     0     0 ## ASV14      102     0     0    76     0     0     0     0     0     0     0 ## ASV6519      0    35    61    87    43    63     0     0     0     0     0 ## ASV3823      0    25    52    37    25    32    29    23    27     0     0 ## ASV3800      0    30    24     0     0    24     0    25    21    41    38 ## ASV5338      5   224    88    61    66   142    60     0     0     0     0 ## ASV105      57     0    34     0     0    32     0     0     0     0     0 ## ASV117      37     0     0     0     0     0     0    34     0     0    15 ## ASV337      30    14    10     0    24     0    14     0     0     0     0 ##          PAG_5 PAG_6 ## ASV201       0     0 ## ASV138      11     9 ## ASV11736     0     0 ## ASV207       0    36 ## ASV323       0     0 ## ASV4139      0     0 ## ASV4011     11     9 ## ASV6667     18     0 ## ASV317     598   161 ## ASV11791     0     0 ## ASV712       0     0 ## ASV6543      0     0 ## ASV14        0     0 ## ASV6519      0     0 ## ASV3823      0    29 ## ASV3800     34    23 ## ASV5338      0     0 ## ASV105       0     0 ## ASV117       0    42 ## ASV337       0     0 cat(\"--- Original ASV Count:\", nrow(asv_table_example), \"---\\n\") ## --- Original ASV Count: 40 --- filtered_asvs_all <- filter_asvs(   asv_counts_df = asv_table_example,   metadata_df = metadata_df_example,   group_column_name = \"Group\",   min_samples_present = 3,   min_abs_abundance_value = 5,   min_groups_present = 2, # Requires presence in at least 2 groups   min_overall_avg_rel_abundance = 0.01 # Requires overall average relative abundance >= 1% ) ## After filtering by multiple criteria, 20 ASVs were retained. cat(\"\\n--- Filtered ASV Count:\", nrow(filtered_asvs_all), \"---\\n\") ##  ## --- Filtered ASV Count: 20 --- print(filtered_asvs_all) ##          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 ## ASV201      16    23    36    27     0    21    38    25    41    31    24 ## ASV138       0     0    12     0     0     0    49    64    45    56    32 ## ASV11736     0     0     0    83     0     0     0     0     0     0     0 ## ASV207       0     0     5     0     0     0     0     0    41    15     0 ## ASV323       0     0     0    27     0     0    25    26    30    24    66 ## ASV4139     18    29    46    25    50     0    28    31     0    37    55 ## ASV4011      0     0     0     0     0     0     0     0     0    15     0 ## ASV6667      0     0     0     0     0     0     0     0     0     0     0 ## ASV317       0     0     0     0     0     0    48    31    26    33    36 ## ASV11791    33    32     0    34     0     0     0    23     0    10     0 ## ASV712      33     0     0    37    43    21     9     8    11    13    12 ## ASV6543      0     0     0     0     0     0    18     0     0     0     0 ## ASV14       37    44    25    29    20     0   105   155   213    65   111 ## ASV6519      0     0     0     0     0     0     0     0     0    41     0 ## ASV3823      0     0     0     0     0     0     0     0     0     0     0 ## ASV3800      0     0     0     0     0     0     0    15     0    14     0 ## ASV5338      0     0     0     0     0     0     0     0     0     0     0 ## ASV105       0     0     0     0     0     0    44    52    59    37    62 ## ASV117      38    22    28    19    18    22    62    79    51    81    44 ## ASV337       0     0     0     0     0     0     9    16    24    19    30 ##          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 ## ASV201       0    36    35    39    50    53    43     0     0     0     0 ## ASV138      31    15    14    12    14     0    12     8     9     8    16 ## ASV11736     0     0     0   121     0   103     0     0     0     0     0 ## ASV207       0    50     0     0    31     0    32    34     0     0     0 ## ASV323      33     0     0     0     0     0     0     0     0     0     0 ## ASV4139     21    20     0    25    25     0     0     0     0     0     0 ## ASV4011      0     0    18    26    14     0     0     0    10     5     8 ## ASV6667      0    23    18    15    18    10    11    16     0     4     7 ## ASV317      25    16     0    26     0     0     0   122   122    79   428 ## ASV11791     0    20     0     0     0     0     0     0     0     0     0 ## ASV712       7     4     0     0     0     3     0     0     0     0     0 ## ASV6543     34     0    49     0     0     0     0     0     0     0     0 ## ASV14      102     0     0    76     0     0     0     0     0     0     0 ## ASV6519      0    35    61    87    43    63     0     0     0     0     0 ## ASV3823      0    25    52    37    25    32    29    23    27     0     0 ## ASV3800      0    30    24     0     0    24     0    25    21    41    38 ## ASV5338      5   224    88    61    66   142    60     0     0     0     0 ## ASV105      57     0    34     0     0    32     0     0     0     0     0 ## ASV117      37     0     0     0     0     0     0    34     0     0    15 ## ASV337      30    14    10     0    24     0    14     0     0     0     0 ##          PAG_5 PAG_6 ## ASV201       0     0 ## ASV138      11     9 ## ASV11736     0     0 ## ASV207       0    36 ## ASV323       0     0 ## ASV4139      0     0 ## ASV4011     11     9 ## ASV6667     18     0 ## ASV317     598   161 ## ASV11791     0     0 ## ASV712       0     0 ## ASV6543      0     0 ## ASV14        0     0 ## ASV6519      0     0 ## ASV3823      0    29 ## ASV3800     34    23 ## ASV5338      0     0 ## ASV105       0     0 ## ASV117       0    42 ## ASV337       0     0"},{"path":"https://gaoyangxx.github.io/asvtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yang Gao. Author, maintainer.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao Y (2025). asvtools: Tools ASV Data Analysis. R package version 0.0.0.9000, https://github.com/GaoYangxx/asvtools.","code":"@Manual{,   title = {asvtools: Tools for ASV Data Analysis},   author = {Yang Gao},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/GaoYangxx/asvtools},   urldate = {2025-07-01}, }"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"asvtools","dir":"","previous_headings":"","what":"Tools for ASV Data Analysis","title":"Tools for ASV Data Analysis","text":"goal asvtools provide robust flexible way filter Amplicon Sequence Variants (ASVs) based multiple biological statistical criteria, common crucial step microbiome data analysis.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for ASV Data Analysis","text":"can install development version asvtools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GaoYangxx/asvtools\") #> Using GitHub PAT from the git credential store. #> Downloading GitHub repo GaoYangxx/asvtools@HEAD #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #>          checking for file 'C:\\Users\\Gao Yang\\AppData\\Local\\Temp\\RtmpSSzSAg\\remotes7e38d1b39b6\\GaoYangxx-asvtools-25f30aa/DESCRIPTION' ...  ✔  checking for file 'C:\\Users\\Gao Yang\\AppData\\Local\\Temp\\RtmpSSzSAg\\remotes7e38d1b39b6\\GaoYangxx-asvtools-25f30aa/DESCRIPTION' #>       ─  preparing 'asvtools': #>    checking DESCRIPTION meta-information ...     checking DESCRIPTION meta-information ...   ✔  checking DESCRIPTION meta-information #>       ─  checking for LF line-endings in source and make files and shell scripts #>   ─  checking for empty or unneeded directories #>       ─  building 'asvtools_0.0.0.9000.tar.gz' #>       #>  #> Installing package into 'C:/Users/Gao Yang/AppData/Local/Temp/Rtmpo94r89/temp_libpath7a8c291a1b96' #> (as 'lib' is unspecified) library(asvtools) # load the package"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for ASV Data Analysis","text":"filter_asvs() function designed apply series common filtering steps ASV count data. allows highly customizable filtering based absolute abundance, relative abundance, presence across samples biological groups.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"filter_asvs-function-overview","dir":"","previous_headings":"Usage","what":"filter_asvs() Function Overview","title":"Tools for ASV Data Analysis","text":"function filters ASVs based four conditions, can combined used individually: 1.Minimum Sample Presence (Absolute Abundance > 0): ASV must detected (count > 0) least min_samples_present samples. 2.Minimum Absolute Abundance Value: least min_samples_present samples, ASV’s absolute count must greater equal min_abs_abundance_value. Note min_samples_present applies “count > 0” “count >= value” criteria. 3.(Optional) Minimum Group Presence: metadata_df group_column_name provided, ASV must present (absolute abundance > 0) least min_groups_present distinct biological groups defined specified column metadata. 4.Minimum Overall Average Relative Abundance: ASV’s average relative abundance across samples must greater equal min_overall_avg_rel_abundance.","code":"# --- Create dummy ASV count data --- # This small example data allows for clear demonstration of filtering effects. # Note: In a real scenario, you would load your actual ASV table and metadata. ASVs <- data.frame(   JRG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 18, 0, 0, 0, 33, 33, 0, 37, 0, 0, 0, 0, 0, 38, 0),   JRG_2 = c(0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 0, 0, 29, 0, 0, 0, 32, 0, 0, 44, 0, 0, 0, 0, 0, 22, 0),   JRG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 12, 0, 5, 0, 46, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 28, 0),   JRG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 27, 0, 83, 0, 27, 25, 0, 0, 0, 34, 37, 0, 29, 0, 0, 0, 0, 0, 19, 0),   JRG_5 = c(0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 43, 0, 20, 0, 0, 0, 0, 0, 18, 0),   JRG_6 = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 22, 0),   JJG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 38, 49, 0, 0, 25, 28, 0, 0, 48, 0, 9, 18, 105, 0, 0, 0, 0, 44, 62, 9),   JJG_2 = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 64, 0, 0, 26, 31, 0, 0, 31, 23, 8, 0, 155, 0, 0, 15, 0, 52, 79, 16),   JJG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 0, 41, 30, 0, 0, 0, 26, 0, 11, 0, 213, 0, 0, 0, 0, 59, 51, 24),   JJG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 31, 56, 0, 15, 24, 37, 15, 0, 33, 10, 13, 0, 65, 41, 0, 14, 0, 37, 81, 19),   JJG_5 = c(0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 32, 0, 0, 66, 55, 0, 0, 36, 0, 12, 0, 111, 0, 0, 0, 0, 62, 44, 30),   JJG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 33, 21, 0, 0, 25, 0, 7, 34, 102, 0, 0, 0, 5, 57, 37, 30),   TZG_1 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 36, 15, 0, 50, 0, 20, 0, 23, 16, 20, 4, 0, 0, 35, 25, 30, 224, 0, 0, 14),   TZG_2 = c(0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 14, 0, 0, 0, 0, 18, 18, 0, 0, 0, 49, 0, 61, 52, 24, 88, 34, 0, 10),   TZG_3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 12, 121, 0, 0, 25, 26, 15, 26, 0, 0, 0, 76, 87, 37, 0, 61, 0, 0, 0),   TZG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 14, 0, 31, 0, 25, 14, 18, 0, 0, 0, 0, 0, 43, 25, 0, 66, 0, 0, 24),   TZG_5 = c(2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 103, 0, 0, 0, 0, 10, 0, 0, 3, 0, 0, 63, 32, 24, 142, 32, 0, 0),   TZG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 12, 0, 32, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 29, 0, 60, 0, 0, 14),   PAG_1 = c(0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 34, 0, 0, 0, 16, 122, 0, 0, 0, 0, 0, 23, 25, 0, 0, 34, 0),   PAG_2 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 0, 10, 0, 122, 0, 0, 0, 0, 0, 27, 21, 0, 0, 0, 0),   PAG_3 = c(0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 5, 4, 79, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0),   PAG_4 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 8, 7, 428, 0, 0, 0, 0, 0, 0, 38, 0, 0, 15, 0),   PAG_5 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 11, 18, 598, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0),   PAG_6 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 36, 0, 0, 9, 0, 161, 0, 0, 0, 0, 0, 29, 23, 0, 0, 42, 0),   row.names = create dummy metadata --- metadata <- data.frame(   Sample.ID = c(\"JRG_1\", \"JRG_2\", \"JRG_3\", \"JRG_4\", \"JRG_5\", \"JRG_6\", \"JJG_1\", \"JJG_2\", \"JJG_3\", \"JJG_4\", \"JJG_5\", \"JJG_6\", \"TZG_1\", \"TZG_2\", \"TZG_3\", \"TZG_4\", \"TZG_5\", \"TZG_6\", \"PAG_1\", \"PAG_2\", \"PAG_3\", \"PAG_4\", \"PAG_5\", \"PAG_6\"),   Group = c(\"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JRG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"JJG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"TZG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\", \"PAG\"),   Origin = c(\"JR\", \"JR\", \"JR\", \"JR\", \"JR\", \"JR\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"JJ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"TZ\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\"),   Niche = c(\"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\"),   row.names = c(\"JRG_1\", \"JRG_2\", \"JRG_3\", \"JRG_4\", \"JRG_5\", \"JRG_6\", \"JJG_1\", \"JJG_2\", \"JJG_3\", \"JJG_4\", \"JJG_5\", \"JJG_6\", \"TZG_1\", \"TZG_2\", \"TZG_3\", \"TZG_4\", \"TZG_5\", \"TZG_6\", \"PAG_1\", \"PAG_2\", \"PAG_3\", \"PAG_4\", \"PAG_5\", \"PAG_6\"),   stringsAsFactors = FALSE # Important for character columns )"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"example-1-basic-filtering-by-sample-presence-and-absolute-abundance","dir":"","previous_headings":"Usage","what":"Example 1: Basic Filtering by Sample Presence and Absolute Abundance","title":"Tools for ASV Data Analysis","text":"Let’s filter ASVs present least 3 samples, absolute abundance least 5 samples.","code":"library(asvtools)  filtered_asvs_basic <- filter_asvs(   asv_counts_df = ASVs,   min_samples_present = 3,   min_abs_abundance_value = 5 ) #> No `metadata_df` or `group_column_name` provided; skipping group-based filtering. #> After filtering by multiple criteria, 20 ASVs were retained. print(\"Filtered ASVs (min_samples_present=3, min_abs_abundance_value=5):\") #> [1] \"Filtered ASVs (min_samples_present=3, min_abs_abundance_value=5):\" print(filtered_asvs_basic) #>          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 #> ASV201      16    23    36    27     0    21    38    25    41    31    24 #> ASV138       0     0    12     0     0     0    49    64    45    56    32 #> ASV11736     0     0     0    83     0     0     0     0     0     0     0 #> ASV207       0     0     5     0     0     0     0     0    41    15     0 #> ASV323       0     0     0    27     0     0    25    26    30    24    66 #> ASV4139     18    29    46    25    50     0    28    31     0    37    55 #> ASV4011      0     0     0     0     0     0     0     0     0    15     0 #> ASV6667      0     0     0     0     0     0     0     0     0     0     0 #> ASV317       0     0     0     0     0     0    48    31    26    33    36 #> ASV11791    33    32     0    34     0     0     0    23     0    10     0 #> ASV712      33     0     0    37    43    21     9     8    11    13    12 #> ASV6543      0     0     0     0     0     0    18     0     0     0     0 #> ASV14       37    44    25    29    20     0   105   155   213    65   111 #> ASV6519      0     0     0     0     0     0     0     0     0    41     0 #> ASV3823      0     0     0     0     0     0     0     0     0     0     0 #> ASV3800      0     0     0     0     0     0     0    15     0    14     0 #> ASV5338      0     0     0     0     0     0     0     0     0     0     0 #> ASV105       0     0     0     0     0     0    44    52    59    37    62 #> ASV117      38    22    28    19    18    22    62    79    51    81    44 #> ASV337       0     0     0     0     0     0     9    16    24    19    30 #>          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 #> ASV201       0    36    35    39    50    53    43     0     0     0     0 #> ASV138      31    15    14    12    14     0    12     8     9     8    16 #> ASV11736     0     0     0   121     0   103     0     0     0     0     0 #> ASV207       0    50     0     0    31     0    32    34     0     0     0 #> ASV323      33     0     0     0     0     0     0     0     0     0     0 #> ASV4139     21    20     0    25    25     0     0     0     0     0     0 #> ASV4011      0     0    18    26    14     0     0     0    10     5     8 #> ASV6667      0    23    18    15    18    10    11    16     0     4     7 #> ASV317      25    16     0    26     0     0     0   122   122    79   428 #> ASV11791     0    20     0     0     0     0     0     0     0     0     0 #> ASV712       7     4     0     0     0     3     0     0     0     0     0 #> ASV6543     34     0    49     0     0     0     0     0     0     0     0 #> ASV14      102     0     0    76     0     0     0     0     0     0     0 #> ASV6519      0    35    61    87    43    63     0     0     0     0     0 #> ASV3823      0    25    52    37    25    32    29    23    27     0     0 #> ASV3800      0    30    24     0     0    24     0    25    21    41    38 #> ASV5338      5   224    88    61    66   142    60     0     0     0     0 #> ASV105      57     0    34     0     0    32     0     0     0     0     0 #> ASV117      37     0     0     0     0     0     0    34     0     0    15 #> ASV337      30    14    10     0    24     0    14     0     0     0     0 #>          PAG_5 PAG_6 #> ASV201       0     0 #> ASV138      11     9 #> ASV11736     0     0 #> ASV207       0    36 #> ASV323       0     0 #> ASV4139      0     0 #> ASV4011     11     9 #> ASV6667     18     0 #> ASV317     598   161 #> ASV11791     0     0 #> ASV712       0     0 #> ASV6543      0     0 #> ASV14        0     0 #> ASV6519      0     0 #> ASV3823      0    29 #> ASV3800     34    23 #> ASV5338      0     0 #> ASV105       0     0 #> ASV117       0    42 #> ASV337       0     0"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"example-2-combining-all-criteria-including-group-based-filtering","dir":"","previous_headings":"Usage","what":"Example 2: Combining All Criteria, Including Group-based Filtering","title":"Tools for ASV Data Analysis","text":"Now, let’s add filtering biological groups overall relative abundance. want ASVs meet: 1.Present least 3 samples (absolute abundance > 0). 2.Absolute abundance >= 5 least 3 samples. 3.Present least 2 distinct Groups. 4.Overall average relative abundance >= 0.001 (0.1%).","code":"library(asvtools)  filtered_asvs_full <- filter_asvs(   asv_counts_df = ASVs,   metadata_df = metadata,   group_column_name = \"Group\",   min_samples_present = 3,   min_abs_abundance_value = 5,   min_groups_present = 2, # Requires ASV presence in at least 2 distinct groups   min_overall_avg_rel_abundance = 0.001 # Overall average relative abundance ) #> After filtering by multiple criteria, 20 ASVs were retained. print(\"Filtered ASVs (all combined criteria):\") #> [1] \"Filtered ASVs (all combined criteria):\" print(filtered_asvs_full) #>          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 #> ASV201      16    23    36    27     0    21    38    25    41    31    24 #> ASV138       0     0    12     0     0     0    49    64    45    56    32 #> ASV11736     0     0     0    83     0     0     0     0     0     0     0 #> ASV207       0     0     5     0     0     0     0     0    41    15     0 #> ASV323       0     0     0    27     0     0    25    26    30    24    66 #> ASV4139     18    29    46    25    50     0    28    31     0    37    55 #> ASV4011      0     0     0     0     0     0     0     0     0    15     0 #> ASV6667      0     0     0     0     0     0     0     0     0     0     0 #> ASV317       0     0     0     0     0     0    48    31    26    33    36 #> ASV11791    33    32     0    34     0     0     0    23     0    10     0 #> ASV712      33     0     0    37    43    21     9     8    11    13    12 #> ASV6543      0     0     0     0     0     0    18     0     0     0     0 #> ASV14       37    44    25    29    20     0   105   155   213    65   111 #> ASV6519      0     0     0     0     0     0     0     0     0    41     0 #> ASV3823      0     0     0     0     0     0     0     0     0     0     0 #> ASV3800      0     0     0     0     0     0     0    15     0    14     0 #> ASV5338      0     0     0     0     0     0     0     0     0     0     0 #> ASV105       0     0     0     0     0     0    44    52    59    37    62 #> ASV117      38    22    28    19    18    22    62    79    51    81    44 #> ASV337       0     0     0     0     0     0     9    16    24    19    30 #>          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 #> ASV201       0    36    35    39    50    53    43     0     0     0     0 #> ASV138      31    15    14    12    14     0    12     8     9     8    16 #> ASV11736     0     0     0   121     0   103     0     0     0     0     0 #> ASV207       0    50     0     0    31     0    32    34     0     0     0 #> ASV323      33     0     0     0     0     0     0     0     0     0     0 #> ASV4139     21    20     0    25    25     0     0     0     0     0     0 #> ASV4011      0     0    18    26    14     0     0     0    10     5     8 #> ASV6667      0    23    18    15    18    10    11    16     0     4     7 #> ASV317      25    16     0    26     0     0     0   122   122    79   428 #> ASV11791     0    20     0     0     0     0     0     0     0     0     0 #> ASV712       7     4     0     0     0     3     0     0     0     0     0 #> ASV6543     34     0    49     0     0     0     0     0     0     0     0 #> ASV14      102     0     0    76     0     0     0     0     0     0     0 #> ASV6519      0    35    61    87    43    63     0     0     0     0     0 #> ASV3823      0    25    52    37    25    32    29    23    27     0     0 #> ASV3800      0    30    24     0     0    24     0    25    21    41    38 #> ASV5338      5   224    88    61    66   142    60     0     0     0     0 #> ASV105      57     0    34     0     0    32     0     0     0     0     0 #> ASV117      37     0     0     0     0     0     0    34     0     0    15 #> ASV337      30    14    10     0    24     0    14     0     0     0     0 #>          PAG_5 PAG_6 #> ASV201       0     0 #> ASV138      11     9 #> ASV11736     0     0 #> ASV207       0    36 #> ASV323       0     0 #> ASV4139      0     0 #> ASV4011     11     9 #> ASV6667     18     0 #> ASV317     598   161 #> ASV11791     0     0 #> ASV712       0     0 #> ASV6543      0     0 #> ASV14        0     0 #> ASV6519      0     0 #> ASV3823      0    29 #> ASV3800     34    23 #> ASV5338      0     0 #> ASV105       0     0 #> ASV117       0    42 #> ASV337       0     0"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"example-3-skipping-group-based-filtering","dir":"","previous_headings":"Usage","what":"Example 3: Skipping Group-based Filtering","title":"Tools for ASV Data Analysis","text":"provide metadata_df group_column_name, group-based filtering criterion skipped, message displayed.","code":"library(asvtools)  filtered_asvs_no_group <- filter_asvs(   asv_counts_df = ASVs,   min_samples_present = 3,   min_abs_abundance_value = 5,   min_overall_avg_rel_abundance = 0.001 ) #> No `metadata_df` or `group_column_name` provided; skipping group-based filtering. #> After filtering by multiple criteria, 20 ASVs were retained. print(\"Filtered ASVs (no group filtering):\") #> [1] \"Filtered ASVs (no group filtering):\" print(filtered_asvs_no_group) #>          JRG_1 JRG_2 JRG_3 JRG_4 JRG_5 JRG_6 JJG_1 JJG_2 JJG_3 JJG_4 JJG_5 #> ASV201      16    23    36    27     0    21    38    25    41    31    24 #> ASV138       0     0    12     0     0     0    49    64    45    56    32 #> ASV11736     0     0     0    83     0     0     0     0     0     0     0 #> ASV207       0     0     5     0     0     0     0     0    41    15     0 #> ASV323       0     0     0    27     0     0    25    26    30    24    66 #> ASV4139     18    29    46    25    50     0    28    31     0    37    55 #> ASV4011      0     0     0     0     0     0     0     0     0    15     0 #> ASV6667      0     0     0     0     0     0     0     0     0     0     0 #> ASV317       0     0     0     0     0     0    48    31    26    33    36 #> ASV11791    33    32     0    34     0     0     0    23     0    10     0 #> ASV712      33     0     0    37    43    21     9     8    11    13    12 #> ASV6543      0     0     0     0     0     0    18     0     0     0     0 #> ASV14       37    44    25    29    20     0   105   155   213    65   111 #> ASV6519      0     0     0     0     0     0     0     0     0    41     0 #> ASV3823      0     0     0     0     0     0     0     0     0     0     0 #> ASV3800      0     0     0     0     0     0     0    15     0    14     0 #> ASV5338      0     0     0     0     0     0     0     0     0     0     0 #> ASV105       0     0     0     0     0     0    44    52    59    37    62 #> ASV117      38    22    28    19    18    22    62    79    51    81    44 #> ASV337       0     0     0     0     0     0     9    16    24    19    30 #>          JJG_6 TZG_1 TZG_2 TZG_3 TZG_4 TZG_5 TZG_6 PAG_1 PAG_2 PAG_3 PAG_4 #> ASV201       0    36    35    39    50    53    43     0     0     0     0 #> ASV138      31    15    14    12    14     0    12     8     9     8    16 #> ASV11736     0     0     0   121     0   103     0     0     0     0     0 #> ASV207       0    50     0     0    31     0    32    34     0     0     0 #> ASV323      33     0     0     0     0     0     0     0     0     0     0 #> ASV4139     21    20     0    25    25     0     0     0     0     0     0 #> ASV4011      0     0    18    26    14     0     0     0    10     5     8 #> ASV6667      0    23    18    15    18    10    11    16     0     4     7 #> ASV317      25    16     0    26     0     0     0   122   122    79   428 #> ASV11791     0    20     0     0     0     0     0     0     0     0     0 #> ASV712       7     4     0     0     0     3     0     0     0     0     0 #> ASV6543     34     0    49     0     0     0     0     0     0     0     0 #> ASV14      102     0     0    76     0     0     0     0     0     0     0 #> ASV6519      0    35    61    87    43    63     0     0     0     0     0 #> ASV3823      0    25    52    37    25    32    29    23    27     0     0 #> ASV3800      0    30    24     0     0    24     0    25    21    41    38 #> ASV5338      5   224    88    61    66   142    60     0     0     0     0 #> ASV105      57     0    34     0     0    32     0     0     0     0     0 #> ASV117      37     0     0     0     0     0     0    34     0     0    15 #> ASV337      30    14    10     0    24     0    14     0     0     0     0 #>          PAG_5 PAG_6 #> ASV201       0     0 #> ASV138      11     9 #> ASV11736     0     0 #> ASV207       0    36 #> ASV323       0     0 #> ASV4139      0     0 #> ASV4011     11     9 #> ASV6667     18     0 #> ASV317     598   161 #> ASV11791     0     0 #> ASV712       0     0 #> ASV6543      0     0 #> ASV14        0     0 #> ASV6519      0     0 #> ASV3823      0    29 #> ASV3800     34    23 #> ASV5338      0     0 #> ASV105       0     0 #> ASV117       0    42 #> ASV337       0     0"},{"path":"https://gaoyangxx.github.io/asvtools/index.html","id":"error-handling","dir":"","previous_headings":"","what":"Error Handling","title":"Tools for ASV Data Analysis","text":"function includes checks common input issues: 1.asv_counts_df must data frame non-NULL row column names. 2.metadata_df provided, must data frame non-NULL row names (expected sample IDs) least one column. 3.group_column_name provided, must exist metadata_df. 4.warning issued samples asv_counts_df columns matched metadata_df row names.","code":""},{"path":[]},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":null,"dir":"Reference","previous_headings":"","what":"ASV Counts Table — ASVs","title":"ASV Counts Table — ASVs","text":"comprehensive dataset containing Amplicon Sequence Variant (ASV) read counts across various samples. data typically generated 16S rRNA gene sequencing pre-processed include filtered deduplicated ASVs.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASV Counts Table — ASVs","text":"","code":"ASVs"},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASV Counts Table — ASVs","text":"data frame 40 rows (representing unique ASVs) 24 columns (representing individual samples). values within data frame integer read counts. row names ASV identifiers. JRG_1, JRG_2, JRG_3, JRG_4, JRG_5, JRG_6 Integer read counts individual samples JRG group. JJG_1, JJG_2, JJG_3, JJG_4, JJG_5, JJG_6 Integer read counts individual samples JJG group. TZG_1, TZG_2, TZG_3, TZG_4, TZG_5, TZG_6 Integer read counts individual samples TZG group. PAG_1, PAG_2, PAG_3, PAG_4, PAG_5, PAG_6 Integer read counts individual samples PAG group.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ASV Counts Table — ASVs","text":"dataset derived raw sequencing data, undergoing initial quality filtering, denoising, chimera removal steps using DADA2, followed sample- group-based filtering criteria.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASV Counts Table — ASVs","text":"ASVs dataset core component downstream microbial community analyses, including diversity calculations, differential abundance testing, compositional analyses. includes samples JRG, JJG, TZG, PAG groups.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/ASVs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASV Counts Table — ASVs","text":"","code":"if (FALSE) { # \\dontrun{ # To view the first few rows of the ASV table: head(ASVs)  # To check the dimensions: dim(ASVs)  # Access counts for a specific sample, e.g., JRG_1 ASVs$JRG_1 } # }"},{"path":"https://gaoyangxx.github.io/asvtools/reference/asvtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"asvtools: Tools for ASV Data Analysis — asvtools-package","title":"asvtools: Tools for ASV Data Analysis — asvtools-package","text":"suite functions filtering manipulating Amplicon Sequence Variant (ASV) data, commonly used microbiome environmental sequencing studies. includes tools applying various abundance prevalence filters, facilitating downstream analysis.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/asvtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"asvtools: Tools for ASV Data Analysis — asvtools-package","text":"Maintainer: Yang Gao 2421078944gy@gmail.com","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/filter_asvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ASVs Based on Multiple Criteria — filter_asvs","title":"Filter ASVs Based on Multiple Criteria — filter_asvs","text":"function filters ASVs based four conditions: Presence least min_samples_present samples (absolute abundance > 0). Absolute abundance greater min_abs_abundance_value least min_samples_present samples. (Optional) Presence least min_groups_present groups (absolute abundance > 0) defined group_column_name. Overall average relative abundance ASV across samples greater min_overall_avg_rel_abundance.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/filter_asvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ASVs Based on Multiple Criteria — filter_asvs","text":"","code":"filter_asvs(   asv_counts_df,   metadata_df = NULL,   group_column_name = NULL,   min_samples_present = 0,   min_abs_abundance_value = 0,   min_groups_present = 0,   min_overall_avg_rel_abundance = 0 )"},{"path":"https://gaoyangxx.github.io/asvtools/reference/filter_asvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ASVs Based on Multiple Criteria — filter_asvs","text":"asv_counts_df data frame ASV counts, ASV IDs row names sample IDs column names. metadata_df (Optional) data frame sample metadata, sample IDs row names. provided, grouping filter applied based group_column_name. Default NULL. group_column_name (Optional) Character string, name column metadata_df use grouping. effective metadata_df provided. Default NULL. min_samples_present Minimum number samples ASV must present (absolute abundance > 0). min_abs_abundance_value Threshold absolute abundance; ASV's count sample must greater equal value considered \"present\" specific condition. min_groups_present Minimum number groups ASV must present (absolute abundance > 0). applicable metadata_df group_column_name provided. min_overall_avg_rel_abundance Threshold ASV's overall average relative abundance across samples.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/filter_asvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ASVs Based on Multiple Criteria — filter_asvs","text":"data frame filtered ASV counts, containing ASVs meet specified criteria.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/filter_asvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ASVs Based on Multiple Criteria — filter_asvs","text":"","code":"# Assuming b_ASV and metadata_df are already prepared (as shown in previous examples)  # Example 1: Use all filtering criteria (including grouping) # filtered_asvs_full <- filter_asvs( #   asv_counts_df = ASVs, #   metadata_df = metadata, #   group_column_name = \"Group\", # Assuming 'Group' column exists in metadata #   min_samples_present = 3, #   min_abs_abundance_value = 3, #   min_groups_present = 2, #   min_overall_avg_rel_abundance = 0.0001 # ) # print(filtered_asvs_full)  # Example 2: Without grouping filter (metadata_df and group_column_name are NULL) # filtered_asvs_no_group <- filter_asvs( #   asv_counts_df = ASVs, #   min_samples_present = 3, #   min_abs_abundance_value = 3, #   min_overall_avg_rel_abundance = 0.0001 # min_groups_present will be ignored # ) # print(filtered_asvs_no_group)"},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Metadata — metadata","title":"Sample Metadata — metadata","text":"dataset providing essential metadata sample included ASV count table. information crucial grouping samples performing biologically relevant comparisons.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Metadata — metadata","text":"","code":"metadata"},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Metadata — metadata","text":"data frame 24 rows (representing unique sample) 4 columns (representing different metadata variables). Sample.ID Character string. Unique identifier sample, also serving row names (e.g., \"JRG_1\", \"JJG_2\"). Group Factor. Indicates primary experimental group treatment sample (Levels: JRG, JJG, TZG, PAG). Origin Character string factor. Represents geographical biological origin sample (Levels: JR, JJ, TZ, PA). Niche Character string factor. Indicates specific ecological niche environment sample collected (Level: G).","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample Metadata — metadata","text":"Collected experimental design phase study.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Metadata — metadata","text":"metadata table designed directly joined used conjunction ASVs dataset, using Sample.ID linking key, various statistical visualization purposes.","code":""},{"path":"https://gaoyangxx.github.io/asvtools/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Metadata — metadata","text":"","code":"if (FALSE) { # \\dontrun{ # To view the first few rows of the metadata: head(metadata)  # To check the structure: str(metadata)  # Get the 'Group' for all samples metadata$Group } # }"},{"path":[]},{"path":"https://gaoyangxx.github.io/asvtools/news/index.html","id":"asvtools-development-version-1","dir":"Changelog","previous_headings":"","what":"asvtools 0.0.0.9000 (2025-07-02)","title":"asvtools (development version)","text":"Initial CRAN submission asvtools package.","code":""}]
